// This file is @generated by prost-build.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ChainType {
    TypeBitcoin = 0,
    TypeTestnet = 1,
    TypeLitecoin = 2,
    TypeDogecoin = 3,
    TypeReddcoin = 4,
    TypeDash = 5,
    TypePeercoin = 6,
    TypeNamecoin = 7,
    TypeFeathercoin = 8,
    TypeCounterparty = 9,
    TypeBlackcoin = 10,
    TypeNuShares = 11,
    TypeNuBits = 12,
    TypeMazacoin = 13,
    TypeViacoin = 14,
    TypeClearingHouse = 15,
    TypeRubycoin = 16,
    TypeGroestlcoin = 17,
    TypeDigitalcoin = 18,
    TypeCannacoin = 19,
    TypeDigiByte = 20,
    TypeOpenAssets = 21,
    TypeMonacoin = 22,
    TypeClams = 23,
    TypePrimecoin = 24,
    TypeNeoscoin = 25,
    TypeJumbucks = 26,
    TypeziftrCoin = 27,
    TypeVertcoin = 28,
    TypeNxt = 29,
    TypeBurst = 30,
    TypeMonetaryUnit = 31,
    TypeZoom = 32,
    TypeVpncoin = 33,
    TypeCanadaeCoin = 34,
    TypeShadowCash = 35,
    TypeParkByte = 36,
    TypePandacoin = 37,
    TypeStartCoin = 38,
    TypeMoin = 39,
    TypeArgentum = 45,
    TypeGlobalCurrencyReserve = 49,
    TypeNovacoin = 50,
    TypeAsiacoin = 51,
    TypeBitcoindark = 52,
    TypeDopecoin = 53,
    TypeTemplecoin = 54,
    TypeAib = 55,
    TypeEdrCoin = 56,
    TypeSyscoin = 57,
    TypeSolarcoin = 58,
    TypeSmileycoin = 59,
    TypeEther = 60,
    TypeEtherClassic = 61,
    TypeOpenChain = 62,
    TypeOkCash = 69,
    TypeDogecoinDark = 77,
    TypeElectronicGulden = 78,
    TypeClubCoin = 79,
    TypeRichCoin = 80,
    TypePotcoin = 81,
    TypeQuarkcoin = 82,
    TypeTerracoin = 83,
    TypeGridcoin = 84,
    TypeAuroracoin = 85,
    TypeIxCoin = 86,
    TypeGulden = 87,
    TypeBitBean = 88,
    TypeBata = 89,
    TypeMyriadcoin = 90,
    TypeBitSend = 91,
    TypeUnobtanium = 92,
    TypeMasterTrader = 93,
    TypeGoldBlocks = 94,
    TypeSaham = 95,
    TypeChronos = 96,
    TypeUbiquoin = 97,
    TypeEvotion = 98,
    TypeSaveTheOcean = 99,
    TypeBigUp = 100,
    TypeGameCredits = 101,
    TypeDollarcoins = 102,
    TypeZayedcoin = 103,
    TypeDubaicoin = 104,
    TypeStratis = 105,
    TypeShilling = 106,
    TypePiggyCoin = 118,
    TypeMonero = 128,
    TypeNavCoin = 130,
    TypeFactomFactoids = 131,
    TypeFactomEntryCredits = 132,
    TypeZcash = 133,
    TypeLisk = 134,
    TypeFactomIdentity = 135,
    TypeRipple = 144,
    TypeBitcoinCash = 145,
    TypeSolana = 501,
    TypeMatic = 966,
}
impl ChainType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ChainType::TypeBitcoin => "TypeBitcoin",
            ChainType::TypeTestnet => "TypeTestnet",
            ChainType::TypeLitecoin => "TypeLitecoin",
            ChainType::TypeDogecoin => "TypeDogecoin",
            ChainType::TypeReddcoin => "TypeReddcoin",
            ChainType::TypeDash => "TypeDash",
            ChainType::TypePeercoin => "TypePeercoin",
            ChainType::TypeNamecoin => "TypeNamecoin",
            ChainType::TypeFeathercoin => "TypeFeathercoin",
            ChainType::TypeCounterparty => "TypeCounterparty",
            ChainType::TypeBlackcoin => "TypeBlackcoin",
            ChainType::TypeNuShares => "TypeNuShares",
            ChainType::TypeNuBits => "TypeNuBits",
            ChainType::TypeMazacoin => "TypeMazacoin",
            ChainType::TypeViacoin => "TypeViacoin",
            ChainType::TypeClearingHouse => "TypeClearingHouse",
            ChainType::TypeRubycoin => "TypeRubycoin",
            ChainType::TypeGroestlcoin => "TypeGroestlcoin",
            ChainType::TypeDigitalcoin => "TypeDigitalcoin",
            ChainType::TypeCannacoin => "TypeCannacoin",
            ChainType::TypeDigiByte => "TypeDigiByte",
            ChainType::TypeOpenAssets => "TypeOpenAssets",
            ChainType::TypeMonacoin => "TypeMonacoin",
            ChainType::TypeClams => "TypeClams",
            ChainType::TypePrimecoin => "TypePrimecoin",
            ChainType::TypeNeoscoin => "TypeNeoscoin",
            ChainType::TypeJumbucks => "TypeJumbucks",
            ChainType::TypeziftrCoin => "TypeziftrCOIN",
            ChainType::TypeVertcoin => "TypeVertcoin",
            ChainType::TypeNxt => "TypeNXT",
            ChainType::TypeBurst => "TypeBurst",
            ChainType::TypeMonetaryUnit => "TypeMonetaryUnit",
            ChainType::TypeZoom => "TypeZoom",
            ChainType::TypeVpncoin => "TypeVpncoin",
            ChainType::TypeCanadaeCoin => "TypeCanadaeCoin",
            ChainType::TypeShadowCash => "TypeShadowCash",
            ChainType::TypeParkByte => "TypeParkByte",
            ChainType::TypePandacoin => "TypePandacoin",
            ChainType::TypeStartCoin => "TypeStartCOIN",
            ChainType::TypeMoin => "TypeMOIN",
            ChainType::TypeArgentum => "TypeArgentum",
            ChainType::TypeGlobalCurrencyReserve => "TypeGlobalCurrencyReserve",
            ChainType::TypeNovacoin => "TypeNovacoin",
            ChainType::TypeAsiacoin => "TypeAsiacoin",
            ChainType::TypeBitcoindark => "TypeBitcoindark",
            ChainType::TypeDopecoin => "TypeDopecoin",
            ChainType::TypeTemplecoin => "TypeTemplecoin",
            ChainType::TypeAib => "TypeAIB",
            ChainType::TypeEdrCoin => "TypeEDRCoin",
            ChainType::TypeSyscoin => "TypeSyscoin",
            ChainType::TypeSolarcoin => "TypeSolarcoin",
            ChainType::TypeSmileycoin => "TypeSmileycoin",
            ChainType::TypeEther => "TypeEther",
            ChainType::TypeEtherClassic => "TypeEtherClassic",
            ChainType::TypeOpenChain => "TypeOpenChain",
            ChainType::TypeOkCash => "TypeOKCash",
            ChainType::TypeDogecoinDark => "TypeDogecoinDark",
            ChainType::TypeElectronicGulden => "TypeElectronicGulden",
            ChainType::TypeClubCoin => "TypeClubCoin",
            ChainType::TypeRichCoin => "TypeRichCoin",
            ChainType::TypePotcoin => "TypePotcoin",
            ChainType::TypeQuarkcoin => "TypeQuarkcoin",
            ChainType::TypeTerracoin => "TypeTerracoin",
            ChainType::TypeGridcoin => "TypeGridcoin",
            ChainType::TypeAuroracoin => "TypeAuroracoin",
            ChainType::TypeIxCoin => "TypeIXCoin",
            ChainType::TypeGulden => "TypeGulden",
            ChainType::TypeBitBean => "TypeBitBean",
            ChainType::TypeBata => "TypeBata",
            ChainType::TypeMyriadcoin => "TypeMyriadcoin",
            ChainType::TypeBitSend => "TypeBitSend",
            ChainType::TypeUnobtanium => "TypeUnobtanium",
            ChainType::TypeMasterTrader => "TypeMasterTrader",
            ChainType::TypeGoldBlocks => "TypeGoldBlocks",
            ChainType::TypeSaham => "TypeSaham",
            ChainType::TypeChronos => "TypeChronos",
            ChainType::TypeUbiquoin => "TypeUbiquoin",
            ChainType::TypeEvotion => "TypeEvotion",
            ChainType::TypeSaveTheOcean => "TypeSaveTheOcean",
            ChainType::TypeBigUp => "TypeBigUp",
            ChainType::TypeGameCredits => "TypeGameCredits",
            ChainType::TypeDollarcoins => "TypeDollarcoins",
            ChainType::TypeZayedcoin => "TypeZayedcoin",
            ChainType::TypeDubaicoin => "TypeDubaicoin",
            ChainType::TypeStratis => "TypeStratis",
            ChainType::TypeShilling => "TypeShilling",
            ChainType::TypePiggyCoin => "TypePiggyCoin",
            ChainType::TypeMonero => "TypeMonero",
            ChainType::TypeNavCoin => "TypeNavCoin",
            ChainType::TypeFactomFactoids => "TypeFactomFactoids",
            ChainType::TypeFactomEntryCredits => "TypeFactomEntryCredits",
            ChainType::TypeZcash => "TypeZcash",
            ChainType::TypeLisk => "TypeLisk",
            ChainType::TypeFactomIdentity => "TypeFactomIdentity",
            ChainType::TypeRipple => "TypeRipple",
            ChainType::TypeBitcoinCash => "TypeBitcoinCash",
            ChainType::TypeSolana => "TypeSolana",
            ChainType::TypeMatic => "TypeMatic",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TypeBitcoin" => Some(Self::TypeBitcoin),
            "TypeTestnet" => Some(Self::TypeTestnet),
            "TypeLitecoin" => Some(Self::TypeLitecoin),
            "TypeDogecoin" => Some(Self::TypeDogecoin),
            "TypeReddcoin" => Some(Self::TypeReddcoin),
            "TypeDash" => Some(Self::TypeDash),
            "TypePeercoin" => Some(Self::TypePeercoin),
            "TypeNamecoin" => Some(Self::TypeNamecoin),
            "TypeFeathercoin" => Some(Self::TypeFeathercoin),
            "TypeCounterparty" => Some(Self::TypeCounterparty),
            "TypeBlackcoin" => Some(Self::TypeBlackcoin),
            "TypeNuShares" => Some(Self::TypeNuShares),
            "TypeNuBits" => Some(Self::TypeNuBits),
            "TypeMazacoin" => Some(Self::TypeMazacoin),
            "TypeViacoin" => Some(Self::TypeViacoin),
            "TypeClearingHouse" => Some(Self::TypeClearingHouse),
            "TypeRubycoin" => Some(Self::TypeRubycoin),
            "TypeGroestlcoin" => Some(Self::TypeGroestlcoin),
            "TypeDigitalcoin" => Some(Self::TypeDigitalcoin),
            "TypeCannacoin" => Some(Self::TypeCannacoin),
            "TypeDigiByte" => Some(Self::TypeDigiByte),
            "TypeOpenAssets" => Some(Self::TypeOpenAssets),
            "TypeMonacoin" => Some(Self::TypeMonacoin),
            "TypeClams" => Some(Self::TypeClams),
            "TypePrimecoin" => Some(Self::TypePrimecoin),
            "TypeNeoscoin" => Some(Self::TypeNeoscoin),
            "TypeJumbucks" => Some(Self::TypeJumbucks),
            "TypeziftrCOIN" => Some(Self::TypeziftrCoin),
            "TypeVertcoin" => Some(Self::TypeVertcoin),
            "TypeNXT" => Some(Self::TypeNxt),
            "TypeBurst" => Some(Self::TypeBurst),
            "TypeMonetaryUnit" => Some(Self::TypeMonetaryUnit),
            "TypeZoom" => Some(Self::TypeZoom),
            "TypeVpncoin" => Some(Self::TypeVpncoin),
            "TypeCanadaeCoin" => Some(Self::TypeCanadaeCoin),
            "TypeShadowCash" => Some(Self::TypeShadowCash),
            "TypeParkByte" => Some(Self::TypeParkByte),
            "TypePandacoin" => Some(Self::TypePandacoin),
            "TypeStartCOIN" => Some(Self::TypeStartCoin),
            "TypeMOIN" => Some(Self::TypeMoin),
            "TypeArgentum" => Some(Self::TypeArgentum),
            "TypeGlobalCurrencyReserve" => Some(Self::TypeGlobalCurrencyReserve),
            "TypeNovacoin" => Some(Self::TypeNovacoin),
            "TypeAsiacoin" => Some(Self::TypeAsiacoin),
            "TypeBitcoindark" => Some(Self::TypeBitcoindark),
            "TypeDopecoin" => Some(Self::TypeDopecoin),
            "TypeTemplecoin" => Some(Self::TypeTemplecoin),
            "TypeAIB" => Some(Self::TypeAib),
            "TypeEDRCoin" => Some(Self::TypeEdrCoin),
            "TypeSyscoin" => Some(Self::TypeSyscoin),
            "TypeSolarcoin" => Some(Self::TypeSolarcoin),
            "TypeSmileycoin" => Some(Self::TypeSmileycoin),
            "TypeEther" => Some(Self::TypeEther),
            "TypeEtherClassic" => Some(Self::TypeEtherClassic),
            "TypeOpenChain" => Some(Self::TypeOpenChain),
            "TypeOKCash" => Some(Self::TypeOkCash),
            "TypeDogecoinDark" => Some(Self::TypeDogecoinDark),
            "TypeElectronicGulden" => Some(Self::TypeElectronicGulden),
            "TypeClubCoin" => Some(Self::TypeClubCoin),
            "TypeRichCoin" => Some(Self::TypeRichCoin),
            "TypePotcoin" => Some(Self::TypePotcoin),
            "TypeQuarkcoin" => Some(Self::TypeQuarkcoin),
            "TypeTerracoin" => Some(Self::TypeTerracoin),
            "TypeGridcoin" => Some(Self::TypeGridcoin),
            "TypeAuroracoin" => Some(Self::TypeAuroracoin),
            "TypeIXCoin" => Some(Self::TypeIxCoin),
            "TypeGulden" => Some(Self::TypeGulden),
            "TypeBitBean" => Some(Self::TypeBitBean),
            "TypeBata" => Some(Self::TypeBata),
            "TypeMyriadcoin" => Some(Self::TypeMyriadcoin),
            "TypeBitSend" => Some(Self::TypeBitSend),
            "TypeUnobtanium" => Some(Self::TypeUnobtanium),
            "TypeMasterTrader" => Some(Self::TypeMasterTrader),
            "TypeGoldBlocks" => Some(Self::TypeGoldBlocks),
            "TypeSaham" => Some(Self::TypeSaham),
            "TypeChronos" => Some(Self::TypeChronos),
            "TypeUbiquoin" => Some(Self::TypeUbiquoin),
            "TypeEvotion" => Some(Self::TypeEvotion),
            "TypeSaveTheOcean" => Some(Self::TypeSaveTheOcean),
            "TypeBigUp" => Some(Self::TypeBigUp),
            "TypeGameCredits" => Some(Self::TypeGameCredits),
            "TypeDollarcoins" => Some(Self::TypeDollarcoins),
            "TypeZayedcoin" => Some(Self::TypeZayedcoin),
            "TypeDubaicoin" => Some(Self::TypeDubaicoin),
            "TypeStratis" => Some(Self::TypeStratis),
            "TypeShilling" => Some(Self::TypeShilling),
            "TypePiggyCoin" => Some(Self::TypePiggyCoin),
            "TypeMonero" => Some(Self::TypeMonero),
            "TypeNavCoin" => Some(Self::TypeNavCoin),
            "TypeFactomFactoids" => Some(Self::TypeFactomFactoids),
            "TypeFactomEntryCredits" => Some(Self::TypeFactomEntryCredits),
            "TypeZcash" => Some(Self::TypeZcash),
            "TypeLisk" => Some(Self::TypeLisk),
            "TypeFactomIdentity" => Some(Self::TypeFactomIdentity),
            "TypeRipple" => Some(Self::TypeRipple),
            "TypeBitcoinCash" => Some(Self::TypeBitcoinCash),
            "TypeSolana" => Some(Self::TypeSolana),
            "TypeMatic" => Some(Self::TypeMatic),
            _ => None,
        }
    }
}
