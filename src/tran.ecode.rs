// This file is @generated by prost-build.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ErrorReason {
    /// 为某个枚举单独设置错误码
    UserNotFound = 0,
    ContentMissing = 1,
    InvalidPubEcdsa = 10000,
    TxOutNil = 10001,
    InvalidScriptType = 10002,
    ErrMnemonic = 10003,
    ErrPrivateKey = 10004,
    InvalidBlock = 10005,
    BalanceNotEnough = 10006,
    TxFailed = 10007,
}
impl ErrorReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ErrorReason::UserNotFound => "USER_NOT_FOUND",
            ErrorReason::ContentMissing => "CONTENT_MISSING",
            ErrorReason::InvalidPubEcdsa => "Invalid_Pub_ECDSA",
            ErrorReason::TxOutNil => "TxOutNil",
            ErrorReason::InvalidScriptType => "InvalidScriptType",
            ErrorReason::ErrMnemonic => "ErrMnemonic",
            ErrorReason::ErrPrivateKey => "ErrPrivateKey",
            ErrorReason::InvalidBlock => "InvalidBlock",
            ErrorReason::BalanceNotEnough => "BalanceNotEnough",
            ErrorReason::TxFailed => "TxFailed",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "USER_NOT_FOUND" => Some(Self::UserNotFound),
            "CONTENT_MISSING" => Some(Self::ContentMissing),
            "Invalid_Pub_ECDSA" => Some(Self::InvalidPubEcdsa),
            "TxOutNil" => Some(Self::TxOutNil),
            "InvalidScriptType" => Some(Self::InvalidScriptType),
            "ErrMnemonic" => Some(Self::ErrMnemonic),
            "ErrPrivateKey" => Some(Self::ErrPrivateKey),
            "InvalidBlock" => Some(Self::InvalidBlock),
            "BalanceNotEnough" => Some(Self::BalanceNotEnough),
            "TxFailed" => Some(Self::TxFailed),
            _ => None,
        }
    }
}
