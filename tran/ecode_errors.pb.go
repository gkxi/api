// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package tran

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 为某个枚举单独设置错误码
func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 404
}

// 为某个枚举单独设置错误码
func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsContentMissing(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CONTENT_MISSING.String() && e.Code == 400
}

func ErrorContentMissing(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_CONTENT_MISSING.String(), fmt.Sprintf(format, args...))
}

func IsInvalidPubEcdsa(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Invalid_Pub_ECDSA.String() && e.Code == 500
}

func ErrorInvalidPubEcdsa(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_Invalid_Pub_ECDSA.String(), fmt.Sprintf(format, args...))
}

func IsTxOutNil(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TxOutNil.String() && e.Code == 500
}

func ErrorTxOutNil(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_TxOutNil.String(), fmt.Sprintf(format, args...))
}

func IsInvalidScriptType(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_InvalidScriptType.String() && e.Code == 500
}

func ErrorInvalidScriptType(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_InvalidScriptType.String(), fmt.Sprintf(format, args...))
}

func IsErrMnemonic(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ErrMnemonic.String() && e.Code == 500
}

func ErrorErrMnemonic(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ErrMnemonic.String(), fmt.Sprintf(format, args...))
}

func IsErrPrivateKey(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ErrPrivateKey.String() && e.Code == 500
}

func ErrorErrPrivateKey(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ErrPrivateKey.String(), fmt.Sprintf(format, args...))
}

func IsInvalidBlock(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_InvalidBlock.String() && e.Code == 500
}

func ErrorInvalidBlock(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_InvalidBlock.String(), fmt.Sprintf(format, args...))
}

func IsBalanceNotEnough(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BalanceNotEnough.String() && e.Code == 500
}

func ErrorBalanceNotEnough(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_BalanceNotEnough.String(), fmt.Sprintf(format, args...))
}

func IsTxFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TxFailed.String() && e.Code == 500
}

func ErrorTxFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_TxFailed.String(), fmt.Sprintf(format, args...))
}
